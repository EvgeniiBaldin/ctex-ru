%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.96 Copyright 2005 Radical Eye Software
%%Title: chemistry-xymtex.dvi
%%CreationDate: Sun Nov 11 01:12:37 2007
%%BoundingBox: 45 569 273 752
%%DocumentFonts: SFRM1000 CMR7
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/texlive/pro/bin/i386-linux/dvips -E
%+ chemistry-xymtex.dvi -o chemistry-xymtex.eps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2007.11.11:0111
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!
% PostScript prologue for pst-coil.tex.
% Version 1.00, 2006/11/05
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 } def
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t2a.enc 0 0
% This file is generated from `T2Auni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T2AEncoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/uni04C0
/angleleft
/angleright
% 0x10
/quotedblleft
/quotedblright
/cyrflex
/dblgrave
/cyrbreve
/endash
/emdash.cyr % CYRILLIC EM DASH
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/afii10050
/uni0492
/afii10051
/afii10060
/uni04BA
/uni0496
/uni0498
/afii10058
/afii10056
/uni049A
/uni04A0
/uni049C
/uni04D4
/uni04A2
/uni04A4
/afii10054
% 0x90
/uni04E8
/uni04AA
/afii10062
/uni04AE
/uni04B0
/uni04B2
/afii10145
/uni04B8
/uni04B6
/afii10053
/uni04D8
/afii10059
/afii10023
/afii61352
/currency
/section
% 0xA0
/afii10098
/uni0493
/afii10099
/afii10108
/uni04BB
/uni0497
/uni0499
/afii10106
/afii10104
/uni049B
/uni04A1
/uni049D
/uni04D5
/uni04A3
/uni04A5
/afii10102
% 0xB0
/uni04E9
/uni04AB
/afii10110
/uni04AF
/uni04B1
/uni04B3
/afii10193
/uni04B9
/uni04B7
/afii10101
/afii10846
/afii10107
/afii10071
/quotedblbase
/guillemotleft.cyr
/guillemotright.cyr
% 0xC0
/afii10017
/afii10018
/afii10019
/afii10020
/afii10021
/afii10022
/afii10024
/afii10025
/afii10026
/afii10027
/afii10028
/afii10029
/afii10030
/afii10031
/afii10032
/afii10033
% 0xD0
/afii10034
/afii10035
/afii10036
/afii10037
/afii10038
/afii10039
/afii10040
/afii10041
/afii10042
/afii10043
/afii10044
/afii10045
/afii10046
/afii10047
/afii10048
/afii10049
% 0xE0
/afii10065
/afii10066
/afii10067
/afii10068
/afii10069
/afii10070
/afii10072
/afii10073
/afii10074
/afii10075
/afii10076
/afii10077
/afii10078
/afii10079
/afii10080
/afii10081
% 0xF0
/afii10082
/afii10083
/afii10084
/afii10085
/afii10086
/afii10087
/afii10088
/afii10089
/afii10090
/afii10091
/afii10092
/afii10093
/afii10094
/afii10095
/afii10096
/afii10097
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMR7
%!PS-AdobeFont-1.1: CMR7 1.0
%%CreationDate: 1991 Aug 20 16:39:21
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR7 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
readonly def
/FontBBox{-27 -250 1122 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CABB9FFC6CC3F1E9AE32F234EB60FE7D
E34995B1ACFF52428EA20C8ED4FD73E3935CEBD40E0EAD70C0887A451E1B1AC8
47AEDE4191CCDB8B61345FD070FD30C4F375D8418DDD454729A251B3F61DAE7C
8882384282FDD6102AE8EEFEDE6447576AFA181F27A48216A9CAD730561469E4
78B286F22328F2AE84EF183DE4119C402771A249AAC1FA5435690A28D1B47486
1060C8000D3FE1BF45133CF847A24B4F8464A63CEA01EC84AA22FD005E74847E
01426B6890951A7DD1F50A5F3285E1F958F11FC7F00EE26FEE7C63998EA1328B
C9841C57C80946D2C2FC81346249A664ECFB08A2CE075036CEA7359FCA1E90C0
F686C3BB27EEFA45D548F7BD074CE60E626A4F83C69FE93A5324133A78362F30
8E8DCC80DD0C49E137CDC9AC08BAE39282E26A7A4D8C159B95F227BDA2A281AF
A9DAEBF31F504380B20812A211CF9FEB112EC29A3FB3BD3E81809FC6293487A7
455EB3B879D2B4BD46942BB1243896264722CB59146C3F65BD59B96A74B12BB2
9A1354AF174932210C6E19FE584B1B14C00E746089CBB17E68845D7B3EA05105
EEE461E3697FCF835CBE6D46C75523478E766832751CF6D96EC338BDAD57D53B
52F5340FAC9FE0456AD13101824234B262AC0CABA43B62EBDA39795BAE6CFE97
563A50AAE1F195888739F2676086A9811E5C9A4A7E0BF34F3E25568930ADF80F
0BDDAC3B634AD4BA6A59720EA4749236CF0F79ABA4716C340F98517F6F06D9AB
7ED8F46FC1868B5F3D3678DF71AA772CF1F7DD222C6BF19D8EF0CFB7A76FC6D1
0AD323C176134907AB375F20CFCD667AB094E2C7CB2179C4283329C9E435E7A4
1E042AD0BAA059B3F862236180B34D3FCED833472577BACD472A4DE3E3F6222F
7A252B780C86447859579C68FE19FFEF116F03E250D3E6F6B2B7FBF0D6BFAC68
50305EB0CF4ED89C0E50094A48A3468F10B460462761E0BA3B1A2E03B3680A40
D03A9B9F96BC532014B5BBA9E89CCE9E0982B1410229E128B58FED1CB8A9169B
26CD8E045442146A789E0320CB7F1EB1FD22E98AF1A0793C3CAD2F738652828C
159087E06EC427F5377FE8E65D11292887DCC730DFD0FDCD6D269A3CF4C0474A
28A0031850FED7A48CCF26F17FCD04CD759FEF0CDB3E59C5B0668FD76FC16EC2
F601357AC820051BC5985A2E68E181B3B5716F5C78374396E2822D6617CD54FB
148A3F27D12F2C3586E266D6F9E23B5FB380B3E2A102945435DE54B8CF69D8EA
6D9B6F87C68703CE909B8AFA7DA47F30CB17971CC083119FF0E6480CA61AAC28
CCF59FED82348D2AE22600D77AAAC1CA917A71E803E9F79912AF22D1B7C5F849
5B86487C79016D9B79E30B2BC593D4375CCC50778DAA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM1000
%!PS-AdobeFont-1.0: SFRM1000 0.3
%%Title: SFRM1000
%Version: 0.3
%%CreationDate: Sat Aug 11 20:18:38 2007
%%Creator: baldin,,,
%Copyright: Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
%Copyright: See the file COPYING (GNU General Public License) for
%Copyright: license conditions.
%Copyright: Converted from METAFONT EC/TC and LH fonts:
%Copyright: ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
% Generated by FontForge 20061019 (http://fontforge.sf.net/)
%%EndComments
FontDirectory/SFRM1000 known{/SFRM1000 findfont dup/UniqueID known{dup
/UniqueID get 5124486 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /SFRM1000 def
/FontBBox {-189 -321 1456 937 }readonly def
/UniqueID 5124486 def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (0.3) readonly def
/Notice (Copyright \050c\051 2001 Vladimir Volovich <vvv@vsu.ru>.\012See the file COPYING \050GNU General Public License\051 for license conditions.\012Converted from METAFONT EC/TC and LH fonts:\012ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.) readonly def
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
/FullName (Computer Modern Roman) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF56DCA20EFC9FA776EB9A127B6FD49B1D4C4AC8E7C0D6BC
BECDAE6B5B071116E4A786528F0F0BBEB2B8ABB62CA6CD4299CB48C3C896EE7C
03782FA8D93A7FC4366E8975B95DB51EB3CA8CEE7BB5880ACA9D38FEA59D83BB
3DCF0FE82704AFF423F6CE3C6DA56C798174E66A0663DCF3959A977F53A92519
210571D4F1EBB2A6E1053BE00E36770E35167A489D024D3E7CE446DEEC89D347
EEE882DBF6210C3F0B9AD7DC65917D2F5770C009821C1219D298B411F9B1ADC7
AFFA8C0E90B14188148CF53256BA1DCB2226DAD8FDDDB638FB7F860786F08CF1
5D4908B726AA748675549614510F0E92FF91926D2AF750B2F1240C79C0FB83DD
FCABBA6E4903FD4CCC525912A9F86FA7DF60D9E234D696A340D2B5D06E1A0F68
7EF0DC67795C1F1220BB25ABC9888442AE4A6CBAE7762EAE5DBD978816C1D3C2
25ACE63426487CAADFD8550D11516AB9A4C04D33C94435B9287C7B55EDE35BF1
D3F841600B404B981C57994FC4C3BBDEFBB93DB1418FB9CA93F45DD784FC2BB2
309A8D714A77C5E534DFFDA92E0592B393CD491E6A3E82B3570FF00579AD3B4B
A6C90B1717A11F1B25825D343EE439A52EC2C99FF0856DBB2B5B596921B94E44
286F131E49D8036958D9048EAD156225D95C45ABF1F481D13F9568142626D51B
6F0E6EDF7C1ED4EB6F973509121E62B9B1A123322EBA795B0166E91EAE429B57
7F83F09E3DF3DE5A5E5D388CB7B3BD34356B136DC6313801491CEEC07A733DC7
0A861B7532C850B9BEB8EBD35CCF5C16A958782A145E2783187E679815167626
403BA66757A8210A85EB15EAB040D3BB500EA497E9B250889012FB7707F45126
73DF75376978D7CC0D303C6513708A5DD8B815A930E6B5429810C622EF811B45
2976AE7D79B2C4F6CDA4F9CE9EBC8E059AC2F73CA750A224D733F7E27E6153F7
48FF83FD1944804B3FE8FC55AF010B443C35DC35F8E8D35CF005F8D228A7A916
F7FFBEE8A6DEC8E1D0BD2EAB19ABF883B599739355E03AE735877F23F780EC81
0D6154E2A3971C139859BE6ECFBCD44190F265DA6393FB56387D7A17F18FB311
B5EA37F15379A1F0FFF811938D480BDD91501AEA82DA6E2EE8D20B9B6E7CA1AA
45CB1B7C8652681D0926293C78B4F9717DC51A22EABDFD62E579945778561E10
ACD176A94AC31053CC32ACD7B1AE7C7048D8B330EF3501D018D366B7E2BA3025
B477DD3C40B7598BABF3AC7F27CFD4AB23D96B5B8A8F957E642EA29EB8433422
B4E99E5E587A38837BCC99783C433D899BD0E29E62978D619962453BBC53791E
C5AE9F21F4BE17AE049C6BA385D6EDFA5B866953427BFCBE11C94037345CDC3A
B8E767A7A9B4D2A5651C72CCCCEC1E90FB32E02CF687E8174B7E2E3EC93EE194
D0B661949DC2EDD1B28EE831E009913CB0D2A59A5E9C8D457CF345A90F6BBFA2
AD4734F399B2F6D8FF343000C9BCB5EC985A4730BE05FF61BB743408F0F96964
A7D5D05E1C3A66A1CFB27BA050CA0F027943A71B14330165D4C64A902AA2F66A
18384C9C033C91B6BD9DE45DB8FA3E8BB4E82F46F4AF3E151560CB1441CE8BDA
E239292EB24BA0DEE479A53B81DDF76C76DDF171A12C8452DFEEFC83A1677218
28D14FD85B96E0B24F672CD53D5FA84F0A02D1A5CD12A7BF5DE5E0D1F8D9F8CD
02B4466EAA25140D33CE56BD2E0D7519242151C67F86802F5B914AC2EEDEED5C
80311518A5C11C07A22AFA4454B26DB65D030028622954F99C20CE46D54E1959
BB69AFD934B9E6AB395207130D2528A5ECA0E60CAF8556AD0FF31B2D273D806D
0AC0C2528803C1BE6FE6FB49EBC6DA4B154FAC3E48234432476F42EA892ADC90
C39B0D6EB0BEE57601A834CBD5DF36E15F69C55B663EF0B3FA00CD4B5AE70E5E
1C591DD26AE7C18B509A42A8BE0743EEED6F9DBF9F3F34EB34F4685139AB80EB
B8264B3E35C387F983C9F52335F51D80ECE57F5F162DBA6920C7B477ECFFDD54
44B0D5D0A54C922A92627D7C06B84B608D5E18089EEF27D7F09A1CCD1D7B73C3
35A2938ECE65D7BE2AB3E0F2A1C3DA57D1A8EBD6BC6C883DA35996975F445434
8A9FEC0277F536C4933C8EDA4BF7B3571F2E515AFB436833114E7484DE2E64F5
9FB8CC33A3F958D6684CCF0E3DB5CC871C2A5B85E323D53EC0A6A76F7EE11380
72E9B0F79376564D60875FC09C3FA870D997FE925E74745E9C510CB4AC775EF6
9DB9E27E413282444F6A758E8C6A769C2A9D4D935CB9C4CCB707AB87900FBEEA
C91CDF8D94E6B858910BB9035ABBA0C633D62E78BF480E3DAE7AF37AFE8EE0BF
807257C69AC90C0D18E966734E9FA2DD5DC356BCFFCA331452659A9D7BFA7CF8
3036856C7502DABB5E688DA3AA66C0831AE90A6A32556174D3CF99EDDA89AC78
D41F15ECD30CFEC43F67E6051ABA98A3885B7D5FB9A99CC6929142908BB3FB43
2B3567AF15DA764F6CC8B77B6B6F6FF25BEF488B285881768961DB79F6BF5CCC
2F2C483B8878D9204B628F0F5A6F129BC389FBB1184BF0135B32B498D603A351
CC25F4DA9609AFD6091D6233829BDB26BB15B68CFEB278ED365FDBAF6711E740
E6871BC7212076393D1A5BCC1F19263550767E2265708225D2502A4389CD8A5C
13A5925AEA915FA99D4B695F7240A94222039C11F19661B4447A6484764ACEF4
C38633BA7D7C7F697E2E68CE87D6A25399207ED65E28699291D85E3E8C128BB5
A725045E7BE828648AFBA8B65F241CE1E8BD43D33E4B9DCD5F65B37D4FC5FF02
332E65001F4CD00799074F97E2777E3CD5B8F76C124CA06F53A6554BC91F4B39
19A4D9C4E8ACC18754BDB1B71000757F3BD0384A6DDD03197B6DF5E61D3224BE
663E84D9568DDBF4053A0BE935680D96E38DA480AFDE80ACAA53375220EEEEF2
F7E104106004889057A3B7AFE77D9BE113F00482FB451E323B063FF9A46571C6
9788376F4C169D9A4B877B8B190CD91A00D3EFF880EC039B755E9E675B786E10
E5E4216749CFED123F42794A21234444B3FC62E77E57ACC447183F33228B9F75
961ED1280C6808ED0FD548411696C1CC747AEF91A41EF05215DB5720AADE50BC
598749C67770515BFF6DBC5A940C07AB462AA296621D7722C5A47AB3FA6305C5
5216216540098F86A1EE217C77EDC0BC3F6DFEC4AFA266019C20CAAAEB381145
B3588FAD0AAB944AD9F120DFF24168844BF92C279D1DF5923C9ACF10393655F3
3CB9E7EB09A74BD898D07A31A107326EA219163FD6CA3E5A0985F74421F895F0
20D3D482444C50B428B364487B0FEF8717ABD8D2232B4D35EB256A3AE5C1B0D2
AE331A1E1D4D5DBC7BACF361E52719DA50620E5137E085481F632B861EFFF31A
F04624D486130FB361F799FF5219E405C80DBFB653CCB3C2E10934C95417A7E9
1DBE161727C5861A219A59470E6AF895C93AD43FAD820BB4C58C13678AE33D18
C3EF8DB36A7270CDB3BA2BDDAC02B0C93D29829DC2B9087F070FFB297464CBF4
26545A65B869B2661F5B7B6575119DA27D715F0A42DF446901F0F2A632AF5614
C9EC1FD2A6C79E676D80DACB9F2B89FC51333B4CA7CD98D8CE8B62959C86949E
2CC2F530333C9A80879850481167A7DC78A8A76DDE664449367B44F711D88EC7
028E92AA59EBBBF050573B52DC80B0FA653E2EC9E5161C27DFCC863656482495
18E72D8954BCBC439742A80ED68A7DAF601400AAB2899D4851040C80A64C1E9D
4C500F23ACEDC18C120C2E3D0001C37895247338EFA633428297ECE1771E2621
9BC93237DDF71A9CF08D47B323D03E904243D1E98DC596BD7E7677B7D91C0647
4CEEC23C4DAF1B29029342D16121B3390C87DB04C65447C2515B12B9BCC3AB98
B9EABD96361EDCEB53655A24E4845604C560D1120F90ED4456BC543E5916BD60
C986482FB77BBE9060121FE1798C34A17A6AB350D85904106032A0A107649EEA
D9B8F59E4CF5256B025440BB3713C2FA5638D6CEFB788A39A5A5C51842A13AE2
4684EC59A6FAE55A64148FE73DFB3234F3912D21D68769C9470E3F2DCEB86087
2E0556A5C72FB6FF7F7015D09B116FDFEC79EBF0544A0A989269B34475BF5E18
B5A3111496FB39BD1B25468B6E5B2EDD1624C1AFD3401A8F2086CF3C9D366834
BFF85115EDEAFCA61D1343367A1F5441246000D9A585EDBE50D5B5CAB2455D58
B855DA66180F8E1EAF8A2D1948DF1DA913C8F86F2C58365A77F4B867309629DC
8A9237EF9EF4CA0515B2D1B7B7ED64589CD8D196FC057EB96B392EDCC860C15F
A2622A484D32D4E2AFEBAD06946CDDD7B7AACA6C0AA5A41B3BCC91D459AB5021
37DC8C5032C3DC8E5D96D210F702FFA73794B639D0F9E7AE0D2134546FA90360
B851782BACEE3C28CF7871D3F812CAF86221212D1D321A07B39A14CAE62F41DC
83E7714F3E315A7C63E2DCDCFB7F87DDA2BBC6CC6073839FC2F05C03077D8A0C
9E7373849927450DF6DAF94B27277349A60073C6979312CC0D5C81A89A058584
982D449F1E993AE1EEF449F1AC7840BBA7AAFD999F622D0D1DD573326683C090
82ED3564A9B28D29955F89ED47DD0EBC2ABE45B585D10E85CECBE52F919EFDDD
9630CF8F90CBF2F156EA791E0DBD178AFBB1AE3E72E08CB83F896067121B671F
63869EA022BA7D11BD63381E33860317F70941E782FDADC1224AD556467935E9
3C63794E07F5AD57FDD0F6D859C82B562E80758E8A5C1EDD8FD2E37E34FA42E4
9098561E8E9696DF5A62F1A27D6B1D0FBC9911A979C25E5A81181BAA04415306
D755B890B60523E4A211D00CA64AA90625CBF5ABE06EE227128114B07536D798
41004AA4A1FA1612A78DCF0F03B121B2870FD3ECCF2C034578F9A3F008DCDE1D
8354625DE2A97D78E6F85782F829F79B3E286480B457680BE7758FC50CDFC17E
5EE5FB3276BEA977E933AB1BEEB1B27B2F3D164ED5B9AF1280C482ECC5952F60
8E0AD0D1F6363637CFAAEF4F0FC7CAEDA1EFE35BB80C07E0E701633CCA557BD4
78B70652C4874F4AF391481A982AE0AE8F0764EADD9316048CA985B570DDEFED
E6A64EA15A80BE9AA4709E4FA6DA9CC49B546955BFEF78320D67D14F120F47BF
0C8568D337D6339CAC2FA9C51AF3EAB6AE46A4584A89BD235ADB26332DB72F5E
A2EE4DFCFEF41726C92C2CE299D54EF8A582E766A2C20F429CA48858A0D61716
B9CDF7D67FFE5D7D6E72ACF982456C52D0986762485E2E111038EA4C67E1183A
40249BBECEEF800CFF6CFABCB532465C496571541110DCEA197B20E1915F9CDB
842444BF7CC4A559262C89B487A99B92B7EF0087E6893DDBB5895C047D88FCEC
1B29029368C65744591AC683FE613D8582066B600035FA0EF7AD4236BF1A4632
A7B9DCDAB2F9B8F6FA6C8E3248841AB3CE22D3741DC40F29A61E2676DF55882F
5F41DE8BDA16B6753D8D9EFC41D5C6AEEEE771F712188F4C92641B7C891EDB34
84DE68D56F58E5EF015B98490C17FE3020479384E19AF8AECD888F718055B81A
78B8B39FDAC88BDCCC0C1CD447A18F0F04BE83D2C6FC44B376E74752EA4ACF04
3812E4BF1313703F8A9898D8C175CF434C97CBBA18197EC3C5A7928844060723
A18F19EC2B26AE7CF1C95E4D2FAD1A4F7F9DB3E4143B69B9E0DF94D313F41F04
5B19D8B71376A44E05A5B41F3DB38EE63C24483DDE9F67A0102597DFC316A853
C489B61A3CC7F1A1908E3C63FDFD4D20754A27D27E5B17AFA895787DE85EB9F5
60EFDFE4EE3ACE1CD5222553A1A6B929665EF740E4B8724327B5A6FBA8C1142C
A1FDDDE6DC085764FD4C519FA8742BEC0795773D0107E832A84B2A4AFF55102C
143B67CA605527E129975852C1F99B765E26371D7A47F328DE406D8710C0C724
2D624DAE937EA7D01056999ECC3A938AA560090C43EE5087B0A0C66CD9186E9C
711A2916B6266FD68FCF8F6378241A614E8D7A144F3D9B807850F98C4401049B
469FAF5C3BECC8741D47CCD38332D2C399B40D270B8B68FFACCD9405F619A897
C865D3FA84DCE0F1FA9C54B9F8B9B574C9BA981A8F4D5F4FBDA945D4DAA725DA
6E1E24DA5E9803FD2769809AC972338812B14972D3DC6511903712CBFAF3161D
557B671DFE13AA19A942FE564B1EBF441B06D7B7C739DBFD9C96FDABC13A2B73
97CCF37EADE23ABD4521F69FDBC483411452285234F655AFCA9BAA73BD43E081
ED281383B57BA48F6BB92F810E2031A6E96810116432D402B6EBD9B7208CAAE4
D7E40AE1D275E49DBD4867A1DB946A2F7E6753035073F2AD5FB626921DA8E6A2
C70502CBFF72067E45A1A5223FDEB1F4790BC4D1FCDE1AFBA9F190765298D70C
89645D8F39A9ACA1563B870950BF90C8976690A5CA41DB6CB5A6A9CDAF969876
ADE9D8249235A41B32BB1A0564C55A46351366D61C6CF716ADE7EBD8CDFA6B21
7F180D3AB24D7CFF8B49992D3E2A37BAFF83F757E365397602FCD60D70C65F53
7DF26778F0A1E7C2BAA3C2273FF88151EB2A6DC5C9AF099C7A728E95FBC50D88
9B416A864471EAB31050AF8C6C27A8EF177B3A686EDA6354FE931EB69ED9B39C
7FB5ECBAF29F54CF5A09B36EB52D088226F1ECF75FEC87BB35E00F89A9D65955
84C9EDF98D2CD7735E9545EEFBAFC14F9474453BE920D964FE48BC5D730D9191
05F890A84699149E36FEC03230E3643472DBBE1ED54BB4DBE53353A8AAAB4882
F4EE901A2CD474FB1A5AE8E3DA026B721260093742D27A4823BEA13FA939B3D2
8F3D8F5BD8A2298007C0FC3B5A831F0E1294A9A8D7F224F188960994D967CF18
2F8FF283468CCAA2EFAF24F053FA68BD9B16EE0597DD573844EF2FC8BA518B7E
BEF00FA4A5D282F27E133F2A976C29B8FABBE95AFA8E82DE895CED761B0EC7E0
3DFE08BEF1F042BA8110E6218D065672D5B8EA61D140333D49804A1B41EB9600
075B4BE636483FF2179A06DEA1427DAD8F2871DF3468108E12980D03EA5F122A
64CCB649DD800417F698DD1F38C55340CD07473B5D493BC6C68FDCF84E6FB9CA
9AAD42FE8010193C391AD3CD97C3DF8BEB06A1B5EEDAB48C92BBABFBD7DA041F
2C587EC96D555457B5A2D6FB52486E122B46B0F934B4D3AF86A1F537B108589C
0798CD4B11573C1C25214C7118703D6A043902C980ED303B63FF038D0FFCE3C7
3AF6441404C013501D8621C14CA3C2480E6C3ED0C64CAB288817639F43BC26AE
D457100D0B2D4117911B9A34D9DF00D636A28CE4351BA69B04B108464F0BEE3A
3791F0EF03E3FCA00533A4C0749B922BB56525D632B4D56864566E29588907BE
31659D43EAD3269FBF0BDF7EAC69D636023144BAF8A49410FE55D995C926F90A
2FCC6B2C5D13228390F92CC0CD581E9374C84B10BF5FF66FFA0459D9091374EE
EE0645C7E93225359893C1E102065926E0D6485E15E8D6F488950C4DE682A76F
8DD650811E220D2ED6CCADCF65D46FA81247C52DA15A39CC85C4B8B05937D9F3
CB303F6CE7E0FAA58973474CF41ECC17BFC9DB2A957B1456491927803C274177
A41AF5C04147E58B44ACEC2AC0BA966DA50A6318931ECB40B97152A6CD86F720
C6366A7B8BA15AC4F03B0BF167AE6561779063F2C35A8AF47CB4C3AB05EEFC76
F18BE8B54C5135396DE53F0025FDAE047DBE2CAD2CFFC87FB822EEB92CDFD745
EDE31D42937BA775D8F2988D7BD4A0449430FE28E8B5E1A8372D5944BBCA5763
03CC1D0063CBD4EE16455CEA2C1BF64F6E80B533EACD1F40AFACAEE5F0777259
94697B5D7EBBF18318010D429F36E5021855C7699AD610AB3ED796B3BF1E8DC9
D091F67A968D40958A1F768E8E9A419410ACD7E07EFFAB4DF00F86E7A6CBBF7D
DD11D609151EF44B2D213C08828779D087FB176FE3EB44553419BD0A5D2C459A
BFECFD709A1A016B0B53359A08E1BA082060EE9756A4E843320D249D75689101
E98FD9DAED2A31E2D41E963C88124F020F8BC59461A329628CA7DD5419EACC7F
39E89FD7D5E9EEF2ADB1F7B1FF179CC4EEDE4626686759802708B7D8A2689D38
90DC8A841CD8A6797EA488BC626AE3FEAF66B32DF73B6BA4CDDEA0EDBCD51E96
EF382A83110DF63D5E2BDD7F55340CB5AB5946175764E68AF9FE2FFBFAE9A147
510E8E1CA0E6E0851A59590D87865A66D035E6AC6B767BD06B21212750E9B542
1F6535236B12C9D074E798DD958F52D15505E4D98723AE597D6799CD5B7F09C1
15EA41CD4F6DD287729462F3E84242BE3AA84677D73B85EA0AB0C38F639E7A62
65531D89B66FD83E215FCBDC1AD716F75A2C65616CEB8A8EFCC854CFB7EFD6B5
7700B115E8E069E3703B6889E70F3D4D71719C118435ECC0681906BD4C84F921
6B8E07B7117D69422A143A26C66FF21D556A9B6781C450D5C6D8862F93B02152
B226A961A088A49E18C69A9CA3CF34FA089C6F91831CC4E37B0D5596A32E43FA
52AC0878EC2EB7C1B7E01DABFBD684122CB2BC1620DFF03D5CF3839429D14514
602B343497C593C90728B12DD5321C58CD93D8B33283BFD52DDEC2D7DAAAA04C
A784CED2A50DC2F2E6DE8E4BE23211CD34841E4EFC8565C4FD0F70BEE9E7CE2A
425220B047908BC779AF8848058B25DACD3BFAD7A30C3CF580AC09575B8AD8AD
4499A3FC6B65BB10AD786C799656ABF9DED16A5860DE714E595804CB9E744806
8F51493D3FD0CDC86867AB7B88F78BE3410F070E689BF3B0803F184CA6E2A544
3A083B4EC147D575D5B7758A5815DE36B9FDAB2AB6C1B8A627402F2ADE2361B2
E281A539F8903D991D1FC047117E45DCA007DBB44F3C4C440079F1162AC51A71
2D75FDFAD81AA210A773A447332FE1E3E71F6E74CC0B13B522BC02DE5BF78849
1FDD14B0037ADC38D7A95B1409C99327F84003A6713D4D0616EEEE3C70368C07
FA1928A068ACB4D8529212CD46EF3767238A36733744D3EA9800F9797A4F94DB
797F5EF270B3A8E0A19BEB72BCCD7778B4242487944A0497744A09169D3B1D38
98A4A4A690BEBEF0A97A24208F6EFF8D5021A734A61378548757BAB2FFC553EC
FABFBC2919B0A04FA4B3B62848EB6136462593C96612F8896C4BAAAED63B8FE3
91030C537477A9428BF4E118F04607D221BB041EB983E46E133B8800FEAF36F4
C1E2471E1930BA5AAB6E9A2C69EA67C9D0D0C2F61A648D5D1FC81D1484D91376
55662B6F1658F14A55E0D16B118DFCDF356858594C63EDBA2C71F4E49C012CEF
6F5C260BBD9280E2EDB916E6577D6D941A496A04E89C45507BE1B164D97D4AB9
2226DF0B23A95AD7CA9B8C5971C651F320A298F9A00F0384955B590C7B1C6DD0
6D9557B927FE34E665F8D40C7432BBBAF1832B2FF4326D7334BC5E28D184E80E
9DA3619E3D728AD5EF53FB8CC9D91F83A86E2AFB9F87016F63BE88715C699C1A
7E40673BADCB6350733D641BD081EAC8AC5E48E24160AE6849113FC534751C24
EC1C8F1AB82D8DBBC1209CF7A34037F06CE425200314422EA74965BA37B8EDAD
4DDF40C383B76752D8D8F2575D422355101AC49658B3AB5C143D37FC9D62E333
99F0347B27755B03344B23DE906C09C713BC7E31E870020C6D2F38E860467D67
B04061E73D829B4B0545395D362334DED1BC40DE6DCCC4380AFAD4C6D8862F93
B02152B226A961A088A494213FEF25B18BCBB70374CBF69FDC1496AEC558D111
58A2BA3F1B82677EDFE86FE96FC8B22472FC33824E2A949ADE888AE4DEB552E7
0F19A610AC9C7AB386AB4E11543504BD2F2BD0F94783390A8D3A743D5E41F80F
1F41C05A356CCF3273331BABC2B016D447D4C4379060BE3C3F33111BE3C1B6D3
DA16D2965F5926A7AA9FFFFDB6FDF9361520D9405A0DCBDB3C5DD714B45B9B2E
8BF75D0F8FFE31E17B8C983064E70D5006C951178E6D0018469BC9545855FF9C
A297182A398E9449A35C28AC30AC00C10EB6B5399326C2BD9E5E856537C074F3
675257AC32605F7A063DF15B23CBA37841448641620EB4D1692AE2CD716F9F26
45A78D8CDC20C1D5F559DEAF2830EA308E71A80EB555699747DE229678170180
B89DDF312488ACA3A78A2BE535C3902F71F70C2BE431431B0CE3EA013998CE7B
19CD58272808AC7EB34404BF8A08302A5BA2A0EBCC652F2F36ABC8703D5AEB8D
08EBD5447A7FE433533D2376DF3EE5C4DED7DB7E0316A4E5854C72F0827246FC
A44E4D9E6ED4E2CE0BE12F2AAB50206EEE37FDFBCD69FEA6B088B6F5A8F41AEF
3D63192BB5742C3F00BDAF9E9909EE490E942E6F664F2CAD516EF380E7465038
1E8D0409243C6256300F75836FABEC3AA5F2D8094FB9CB9BAF821700E4E50A60
DD777020AF4EDE36720E108D1A9FE99275EE70737903DE7C67F6B116ECD19D0A
686FB9CAE66BC4A7D228F02DA65BB417EEEE640162A1B08BD6A3C0F15572FCD9
F64D2A2A00343E7C9F0662335A3668582584C21E0F14B83D02271E711F25E4E0
6C449C172832EA2CE44DFECD7077B4718455270F783D6D43AC00618CD02039CE
48D82E533D3A8E987C451BBA3AE34C395FBA5AF39B389284367B49478A0E8E82
37F09F8256EEC2C94319D244F00164BCFDB634CBFAB789F812CBC1FFCA061A21
652104F67B3EB7DE636A8E559309F8C9962D02AC7E636A63A43AC28F0AAF7F7C
97A02506798071F0CA6B7A0BB5ABE6AE9C0CA1CE06FEB594B088E5C9051FDA90
BC19BE1C8B37E1E6A5A3ED9282358E8B6DDDB54D0B7939D43C0AA387BEFA0E3C
AE44ECB76485430693F2C076AB623052C2C6A740040C1C4BDDE36DBA793EC77E
5EB0DE64A2B5C553A227F482480A69070C62EF5E11D143F7DAF25985040D8E3E
B3311872454C409FB2BDE1A20397727B80673D6BA889F3B1F4AB68A218A1CB18
12CD7C54DBA9F8C4742B5A79E22E4A4C697A797E9DE1A34E6EACB8FD268CE0BD
2E4A16496C808C884F0E073865F8292026776519ABD0BF2E2F5C26BCB2EF1550
C6A49FF71109675D240F7A64999F242193FEAC914D393F76BA474EE992477BDA
E8844F739D21573A2C71F4724E46661FBCBA022552BEF15A62147590599865C9
D02DB9F8C32D77B161682F3DE538062B3614C86A5657A6F51269FBEC01EBBB79
3A10F6E7C0BA866518648D3B182C9A0224FC37AF253DF6AA998ED75546DB7F62
E122B5C87DFAAEE2F2A82E2D45D45FD3BB6720113B884DB9DAC7E32110282FB5
B9C8BB72EAF820A7ABBB94671B22EFD41FF3FFF8BD8C7836EFBF9DDEAF5EACC1
2D2733C295798BB629606AB2BCCC15458E7F703D2377C2667F0EB78725EE7FEB
004EC02D5CD155CA55B867DCAFC24AE22C8B2D79340D223C92CC01B63EEE14C3
5A95B62BC19A710467952474913A81C3BBDCF80180F5573F76CE1564C7804BB3
EA671A6F4A30F198282516B7800BA8ECBE1A682C8DDBCD244F17ADE80DA3F4EA
849BDEB14BEE90240BEB2B1ACB3A9D5F4D96CDA0028283A8CEB6D2645F95E26C
165FC611ED44F1A346973C2FA077AC9FB195EA47DA1051E1EFA69C35F1EDF39D
CE03294C8173E82B508A7754CF5EFF749BC4B8D519CD8B47106750B3A62CCD65
684688D4C2B0A4BE1404DC59968220909362C5932A19D7797E48C0291852C6AF
3A46D372AC8021B70DA312293173A587311A3FAAB9D230B98100C8EF41C9D73C
75DA9ED182F1141BE0F3BDB53EB55E5D59689F092D35CBA4FC2D3080C143C35A
89A08FD2A8CFAFB7D7EC686A62034E5810A7BE7CD17406561646065A50E2577F
9643D450FE94385B2AF841D9A437F872A5D763C49697A47778839544A2E2D58E
D023999E25F7D21AC3B30C0E56880907BA05B5BD84A374C50616D15DD4620EE5
69599E9D2CBE83A0DA04F42F2A6A0EE7DED9B2EA31808FBFC87FA44044D4893F
66EFA17D7535B52CD4438B1A6B52D6E4EB3326C34D2A0E4E895708CFA8308C91
0E075F0BCCCEF9F4F6CC8F4B1702DC3E5C0CF4D988B66B9BCC14F25AD96EFBC5
28A7E70AFF40C5BC34973C66955EF4E0F36808CBD932A4DEF0D484F101027690
03CBB3D27E5117A946071EF5CBDFCDEF457F82A687896CD5BC79377185AD7400
228FFFD7B3EAE4BAEC09B02354E4D3A79E946E56800426893EAB277D25D5FC68
C77CCB448D3F583665FBE78B7D74F7593F3775FD432A8A3B1ED1EBDEEA499481
693B70F25573987B2AE56319A35C1C167DF90BDE98D0921A615C4F1256B77F47
66722B2D4A4D45A1CEB809BCEB184AF69CA0A636E284BDD651BB8CB1CA294DA6
EBD87996EB116D6B3F07018052504B6C74D1B1215E283A459B3836E477010451
3EA7C21AB713B6EDD3892FACDB4317BBCF8EC35046F1566F595FCCFA9EED1519
C6637AA5B9A9AA4522C68DAE94ECFF3DBCAB07B3053DFA51F0A49533780C6246
EC48BA45FBCD04FA629E2B6649661FB460531BC473410F8DE842A2159F2B9C85
515FC7CFB8CF0EB34CA0486BBB934077F4ADF58DEDDFF259B9869D1D7D39E190
2C53053C20240032C8FC66887FE8BBD12746885EC0B93AEB089DA19D54EA09DB
030B795AA0CE8D74EDB626D2021423632D7F07C0A1D1E80A91B195BF73E175C6
3297B027116DB1E64C8257C7F2498606D13D1A83C04874B626F82379048B168A
73A7277FAE74B8C22F9B1F150ACAF2CBC381F2D89A368CC019048702789C89D8
733DCC7A655EC0129C2D3437D7F231365BE2C51E7565DA74E4B64CD190BFF5F5
9AC591E015E6124C276EC000FAEA98ED6EDCE9C0A6577A87AE8406145EF39CBC
57C9B5E774464120A20905D1208C10521C015B43DB6D70B1A52B91FB3D1B2236
CF6EC9FC5C270572B49954D81E4244C288CB813272B9CFDCCA03AB14E973ECF6
FC6EA72AC1A5483BBA6F4EFE530A666EE9AE053083F6E7530340F82F9AAB9798
6B5C9091DAD70B3B06732D4B23B6D8B3E4C85105D879DC495ECBDDB3D5003D62
C65C5AC1C17E225F9C5F20B918B0A36DFE77783C01623FD3612C7D9ABCD4D5E8
2C2A905B3A3AB09D8ABD419790785818DC096F80B4870D9902A9FB77DD43CD24
E1F6BF7B3EC68B889458A630D71D56B733A147F62CC745443F881033C7A1FC61
9435B3A774A117F2CA6C202ECBCE0E191A7607BE40947B82D032625A2D1E79F3
CF854023A8480AC02185F3A5554E53182738821A8489436ADCE10B32957F6077
D94CEBBCFA3F80DF647C6FA7E213D1E737B0582506444AF8B04DB5CFF9F61C88
8F7F6B8C339A0985AB4C18FB39B1F03D13B9E4DF4748B3801C13E198602BE9D9
572DE3F2E21977C2F8F0663D429209BB556DD66B53A630EAE9355F6E132B32E8
29D10EA968E2EA3844AD490C5F09D7B1E2803CCFC1C9FFBABED402C5B8623C43
F80EFD950B74E614A35C6F9B3FE4774F66C4227BEBD759D4299F4CBDA0650696
6794ADD0BD6676A0D66DBD904129F6F16C7985D7A487F2F9D4AD0E3F3F3A479B
1EAE5F350676B2DFDC3B14EE62296357FB62FE9CC6C007C9D8E76D6B62186579
7B9894857C11E8BE14A62F8401EF35FB6F71300BBAC80CAFD11ACF5AADAEDEA6
4084E2039F6F69487F0C30777FF1CA93F774D36EF27770625504B20F815C2DFB
7F3373307D77DF3F66505E69D244E88D2C2382E2BAAB932E8505934C92D659ED
EC18E45E6D8DA068735311F9660993A5911001CC15503BD8B06294512B2045D6
C127717A07610B2F3EE2E318D9A0B75C53A9D7034892B71029A87836C03FA6A7
1FC346A14856107C59E5E7FF045E3E91D7A621CF27AFDA0644D931E865636E47
7664EC44367EFDEDEDDA551CC8AC87E118A27CC0AF4C48C199E97BB34125532E
C9BA14BBD1B605F397413DF96B82F99BBD3DD14AC411B6C67A839463E1473055
5496A82595BD12252BA2E6E677B95C8A963BFAED7BF1B1FBA0EEE317A0B86755
4FC4196BD0567DB28E2642C71F24BAEDCE29D0A9F30638C6AFF7BA88677686B3
F0391D23203406444E7F2ED2B24A76B0DF15FA0C223FEB058949E062334636F2
E5C04DFD4CB9E4294E178F72CFD858020ADCA1E2B639720FF46755977660401F
C7A752A3772E41BA88727A808696251706ED2FD27C335C7F864CE0BC36AE063F
833E514DD21BE5C587C3CC389ABE6AB60356E3CF9B377409E128195F8A46F5BC
C2BA12C4D24A775DFF75B710118CD94253CB78FFAD6ED74140334C2714F6E6E2
20F9B4B7A60D26292ABEF4C793584866C58451FCAE9AB59F82BC2479D025BE1A
84845B7A960EA70F1F0F037DD8587196EC0F8777A6AAB49602A8E7D4B12395DD
EC83B1C1160B5D72D8DAA2ACAA5B048E484FF305113F687ADDA5F93585A43DFF
3C144B5A29E5AF024B3868DB074EDB17842C95BA07573EC8E66CAD7951E0A6C8
815A66967B7590EF3978C2718F554CB85993ACB13E773416315A94EF5EDF11F5
8CBAC9CE0F760604F835698BF75B4084491532F7D67AA4B0F56017059EC8EE44
4D6F7EA86257BAE136BD3099FE129F40E9F189A2E9134E5859235FC33C523F93
D97B49A66C60F07C6E5276C89019FBBB4501D36F608DC91D15987A6CEA940D61
091B4EB201C2B7C8301A01D47A445D3735842F6E706AECCB5E0C89D698B46FA3
B910E8AB17977A1A7C9500EF939C16D85157D9B970AC4A2E42725441037BC71F
9E8C666824D07C12FCE3DB7EF646A1552CE5CF1112E4A7D13B39DCAAE01F9F16
7E3AF79CA5D5239EAA306AF4B343BB10D66497C5878348C088E917B257DE3F06
61DD7F664ACC83B638C5B18A8F718013E922561CB958868C6A4E027CF54E39E3
1382EB2FA5E5B05AEC3D7A381217DDB2605BC8FCD3E696539FDA2A2D26941AEE
6DB1F40083C2E412EE5E6FC646A718173784901D925F4AAA1D574E5951025A0B
DDDF3E4AFB29670E295524876CCE41EECC2B1AB275BC1AAD256AFF17F7CEEF7E
54197E6F2AFBD2780E21BE143CEC0C46F4BEFCA79E86208221B5D5679F98E7BA
23D475D79D3C273FA343146106A1A1B8DCD067A4C160550F9536EC808D617557
D49D1B6F9776D4F0091066C042687135709793FBD38744296B82E0074124792D
78543AB1E5359A69CD68985E4492FA0BF1F7CCD561C7F6913CB64A13292289F1
6F3700438467C42EC43FA3076B2674E5A67BF269647AC0C67D4ECDF5D6D67704
02B4F44271FEB274E02030DABA9335A5931164619606E8E9DA05D1F89C401197
CAB4EFA74E91680D07E02FB54EDCE5CD3AEF3AC3AFC3C03E60EEB822F9CB5F12
390C409D37332AA4BA88CC2CACC005B286AE29415C2E483B9171450E4F156DB7
50A906EAD3760ED949509C5BA8971EDE84DD1912DC75C658D19C2EBD390AF25F
8CEEF720325A932A3B4CED38448A8923BBC77C4604AF03B45E3C75648C0BADA2
601C1CE1C5F15174CDA40E3253E909DC56E35FFD2D528D853C61C81B5C0A74AF
E1FB7C2B7607098277FC717882C3D98CADEA91A947E0A1C2BE7CC794EE828594
75E9E4BE8D84E63DE886C1D6FDD34EE28C405AE9E0F260CF6EB23BC007F53381
80AA0236E1560412A42C93F5A25E8D00366226F45E8FB4EE0B01E34213A1B0A5
5054B514F9CD7567A4E99304F13DB459A5F8DCEC497ABB3A0040D13DCA21C73A
81FC12A743C7137F34350677695CCC35B0B5C900A42D124B6C109AB2305654D7
C3DFE3B0D8C1A90D72D46D4754E0010044E0A9B56CB9B777366802EF23122D90
BD52823D227A1E95A56BA4BBEDA04E1566E3169C48C83F033A4385EBFE7949B8
45B07AF27BA0E5D92938E92C7CA2079B1EEE771CB0BD529C85F742999E6E1B71
655C46DE2F58EEB941FD9B42A8CEFF8B1EA27CF25FC10341723746E4A7B0DAFE
FC78679BCFC1B3B342A5A76B1ADF88351774B6E975BF8F27A17CC1D4D0E9AB44
93204C72BE6DFE08ECE9E0016011551278CB616448AB7E569A48CB4193904EB1
50455BD6E11FD01CCB6D95C35BB87DA2B3FAD490FA0703A8D6807DBC8D5BAC9F
356822FF0C677863BBF2BB35E940BF416A86F976D637540AE595AA7D0D1A8144
13F0AC533EB8FD408FC851F1690662146225540A658A9CA19D0EF116E8BA85BA
D105E02493A70F6073CE586D931F3683B0D58BD431583807EE0A93E84CBAF0E7
9FD4B4577020A596A6C6C6AB77CA6C7AAE639ECABB0532AA399CB35137F6825D
357148650055187E7D200FA23AE8C9F9526133FEF79E0081939745E2FE413330
E444779002D2D1A22D83BFD1BF4FFA89BA01957FEE797171DD9C6F271326A2FC
DB40AF670FDC930AC97EB29B12737434C5AEE0D7C76E8BA15289EF90C31C183F
C87971FD3E202D7176934072863B4B8148EEF0FE8FF681B0830A94E5D1938288
4FB69618FAF36BEBE72B17D6C2F443F270DF69065DE0895B44EE29D4B0F67C8A
86432A782AD5E096316C1FD7E729C277E902195DB32D5C5C22E4860C360016DC
33187662B519FBA10332C4000ADE99FD1C62AF2EFAB5813E8D095D6849AE675B
F9F2DB434D9AEC6AC60E66C5E1D198C38DD4B2F2C01A1425D5A6527C343F90FD
B936256D46C2DFF9B4B7A60D26292B6D35658072DF419039F5D8D8F19B865E66
B0E1B30C8C10DA3CEB5B01A9B3B9A5C5F43471ED83AAB2FCEBC5798011DAE158
F2DDB6A86B94F52D6247157A88727B5AD4103C9AFF6CAB615810F32B4F6B5184
634BF8015CEB70012CD2C7FC06B897A5ED5C85604980135449D09CB2F0DDB278
3FA8DBBB125B6CB952450083339437E44B1BB5DC96AE415495635BDFF798B260
E9A94ADC1C8E832DD7FDF13F5351E6C899647FDA8B4AEAACEBC579EF7494E427
C5F588AD857976390CE12C8AACE4F6553610240BA7D79168D42D5B14BC833F44
3B08792A5089196289D47563BE124382C0C6C0F0BBC5F9CBAC80A4B6803929D1
038388DC7DDF4D7C8273260363DF0F6590CA0EFA0F60CF50A8AA982FB8BB8F51
F713DA6EFC4EE7CB0B654E730B78F3E24DC56316FE8513D3408F7DE2E0C6BB79
9012A241414C84951800CCDAC46BF915273C6A96F080E74650381E8D0409243C
6256300F77661CB904D6A10203CBA5470B4C89E24C9D72A0170EB0C5524FC0A5
F3C6B5CD79D72A07B56A6FC0481C56CF4D4DE7CA6FDBA3419C6344BE7DCCCE97
C357ABC9806BA7F408F14F24D9F062DD3798FBBD0D5CE9581D5E83747F36CC07
56E4ADBE85B84CA3BF1E8DC9D091F67A919370F8A062BADF76FAC0E886D4BD5E
272DE77B2EE999933255632189C7BCDEC50559B8286F3B4A4F169340833A8BF2
1AF882B124BC0A373A1FE6E3AE152D2E684365A348A02DA99710181034303273
7491D247787282EC4820B3C63F3B47D51141B792B0214531E1E0E926D179F85D
C41C7FEB8A70771975AB24DFF6BC7BE1325BEC9FF36BB57DD8DB0BC0356DDB16
12AD9619F2A4CF72D35A714F590226C6DE969C44144AB6B5BE591A515CF50652
0D6F9C1CB3954F253E7CFC60FB26E8D679C227DA8E3205059CC886F367CCFEE6
E4217484BB975578CF2625A9BCBF6C28FF39B566DC264422FF57CD0D7509101D
6FC0A2B06D591DFECF8D2FCC224CCFFC083DD5B02408F8C56956CFB2949F62F9
8DCA295465426890194496E058042730E91FD8AD2C7AFE5F890AD6B336A1A864
B9CBDC5A0A0D72441E3022FAF9D6123E794548E3CB3F26D22553F4CD5F95494C
036BC6486E76DAE94ED8928996059A28E5508C301DE45C06C5451C50C05AFF61
EE040DFC1AB279B960E451225B0F1C405463D6A09A13D54C9A6A38C9EE327B3A
641C49948FBA78BBE54F68E54C169012C39F07010EB0E6EEFF21F154785280E6
7E0CAC07D3AE8CFF77C0C881C2FA859BF10136EB5FFD8D0292BE5E26D1E26C93
65A7A4D913302C641E3A087A0EBC96555C95790C94FF41461E3B9CB12EFD2936
C1B448F079C761CD8E3DFA029167C43D358874ECCCE483E50DA34D206549CBBA
AA03FC80D55EF3FE3B884734F7B7D9CDBF60C6047783E14D6597C0A01D27D4E2
CD3B443E5F62AF90BB92AB997D960DC304A24944025A835D94E3FE7837BE684C
E83258BA494C8AE7AE77C7BF354593C6AB58835618409372CBB0FB50132566DC
86B67F4B3BA09A3AA1F665ADE44884284B861956DD24AFA7D87D8E575A81DDC9
DCF02D0801FCCF7CB701E49D69A3B73BF9C81048D017899BACD329DA4E40767D
6789A43F9489D6E0C7C1C63D231B5964E65894E1863366EB9C3264D569B2BA03
1D9580AC2D4561F47E4E50AC23BC89B6FDC8DDA0476851E00084BE1A44115509
58CFB1A75242B65943238B326D3272356A4E91BE73D0FC17954C86C49510877A
EFC29378DD62C2B50942BB19705AF5484E4E50FB98F8881257792439521EA330
AA126C77DDCB37C407DE6B5138EB78FE8A3A9804F922E2D29F86EDF3B85D60A3
B32D5B4DFEB6B8280065D1405DAB652831487E813F8F5268481D5E27834B0A15
0C889ECC6367DBEFF63265AA657E021A9F3FFACAF9DD45E0CEA7AC5BFD83CDFF
B8FF34B1E99C40A70A52B552B4E77F7677FA3E46AB5FF9504A30FFE359381941
86C8EFD956C9A54DFB3F12EE0C289B0FBCD227CDB7EBD12801718AF68DAA6432
56BDBE6823CA15BE299DC6005A41098B50FFDF20C8558C30D397D03ABFB14A33
CE9B834E3892642DC85D6972D592A5E0823BE11B7637B34E0028BF953CD00A39
1EFD9D9E1CC9781235CE4097010C80983E35B5BCE0B7DBF60F12D7A0847BC8C2
18DD3E1DA851E5B93CD3C261B828A855C5A9DE26676C3384547D7E5EE828CCDC
0777001EBDFFAFEF42FAA219CF88F999EDD9D5DC5CC1E5A68E8EEE7FA2C326C8
BF76CB32655DD8F5F221C8F03160576D1ECB64678A6DF0854401672AF821F4E0
7813A6CD2329AF69B27BB57F778DF7279EAB51118F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (chemistry-xymtex.dvi)
@start /Fa 204[33 51[{}1 58.1154 /CMR7 rf /Fb 176[65
6[62 4[60 67[{T2AEncoding ReEncodeFont}3 83.022 /SFRM1000
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title () /Subject () /Creator (LaTeX with hyperref package) /Author () /Keywords () /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
-285 -387 a
SDict begin H.S end
 -285 -387 a 0 TeXcolorgray 0 TeXcolorgray
-285 -387 a
SDict begin H.R end
 -285 -387 a -285 -387 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -285 -387 a Black
0 TeXcolorgray -285 -238 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseOutlines /DOCVIEW pdfmark end
 -285 -238 a -285 -238 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -285
-238 a -285 -238 a
SDict begin H.S end
 -285 -238 a -285 -238 a
SDict begin 12 H.A end
 -285 -238
a -285 -238 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -285 -238 a -119 925 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 41.20251 -20.00122 53.20325 0.0  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 41.20251 -20.00122 12.00073 -20.00122  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 12.00073 -20.00122 0.0 0.0  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 12.00073 20.00122 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 37.20227 20.00122 12.00073 20.00122  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 43.60266 16.00098 53.20325 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial 198 775 a Fb(O)323 925 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial 296 1082 a(H)223 1091 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial 194 983 a(H)223 1091 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial 193 1248 a(OH)-19 1091 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -48 983 a(H)-19 1091 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -49 1248 a(OH)-119 925 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -219 817 a(HO)-119 925 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -155 1082 a(H)-19 759 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -48 651 a(H)-19 759 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial -46 916 a(CH)76 928 y Fa(3)323 925 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 11.80072 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 297 810 a Fb(O)329 785 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 13.0008 7.80048 3.00018 1.80011  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 578 806 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -17.10104 30.40186 0.0 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 30.40186 0.0 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -17.10104 10.20062 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 10.20062 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 30.30185 17.10104 10.30063  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -17.10104 30.30185 -17.10104 10.30063  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 30.40186 34.20209 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 51.30313 30.40186 34.20209 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 10.20062 34.20209 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 51.30313 10.20062 34.20209 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 51.30313 30.30185 51.30313 10.30063  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 34.20209 60.6037 34.20209 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 34.20209 60.7037 51.30313 70.90433  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 68.40417 60.7037 51.30313 70.90433  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 68.40417 60.6037 68.40417 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 68.40417 40.50247 51.30313 30.30185  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 68.40417 60.7037 85.50522 70.90433  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 102.60626 60.7037 85.50522 70.90433  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 102.60626 60.6037 102.60626 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 102.60626 40.60248 68.40417 40.60248  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 1538 253 a(OH)1288
554 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0  setgray  [ 28.20172 39.10239 30.10184 35.70218 17.10104 30.30185  /Lineto /lineto load def false Polygon  gsave 0  setgray fill grestore end
 @endspecial -453 x @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 10.20062 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 17.10104 25.30154 17.10104 10.30063  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 12.90079 30.30185 -17.10104 30.30185  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -17.10104 30.30185 -17.10104 10.30063  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end

@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -17.10104 10.20062 0.0 0.0  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -13.2008 11.70071 -0.60004 4.20026  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 1400 -132 a(O)974 -200 y(O)1288
101 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -28.80176 38.20233 -16.80103 31.00189  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ -29.4018 35.60217 -17.40106 28.40173  /Lineto /lineto load def false Line  gsave 0.4 SLW 0  setgray 0 setlinecap stroke  grestore end
 @endspecial 453 x @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0  setgray  [ -1.80011 54.60333 1.80011 54.60333 0.0 40.60248  /Lineto /lineto load def false Polygon  gsave 0  setgray fill grestore end

@endspecial 720 720 a @beginspecial @setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -13.60083 0.0 -1.10007  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0  setlinecap 1.0 1.2 0.0 0.0 0 0 add DashLine  grestore end
 @endspecial
692 911 a(H)720 554 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0  setgray  [ -1.80011 14.00085 1.80011 14.00085 0.0 0.0  /Lineto /lineto load def false Polygon  gsave 0  setgray fill grestore end
 @endspecial
568 424 a(OHC)1004 554 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0  setgray  [ -1.80011 14.00085 1.80011 14.00085 0.0 0.0  /Lineto /lineto load def false Polygon  gsave 0  setgray fill grestore end
 @endspecial
976 424 a(H)862 469 y @beginspecial @setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -13.60083 0.0 -1.10007  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0  setlinecap 1.0 1.2 0.0 0.0 0 0 add DashLine  grestore end
 @endspecial
834 660 a(H)1146 469 y @beginspecial @setspecial
 tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def [ 0.0 -13.60083 0.0 -1.10007  /Lineto /lineto load def false Line  gsave 1.6 SLW 0  setgray 0  setlinecap 1.0 1.2 0.0 0.0 0 0 add DashLine  grestore end
 @endspecial
1117 660 a(OH)1146 303 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.0 SLW 0  setgray  [ -1.80011 14.00085 1.80011 14.00085 0.0 0.0  /Lineto /lineto load def false Polygon  gsave 0  setgray fill grestore end
 @endspecial
1021 172 a(H)1083 184 y Fa(3)1120 172 y Fb(C)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
